options{	static = true;	DEBUG_PARSER = false;	LOOKAHEAD = 4;	FORCE_LA_CHECK = true;}PARSER_BEGIN(SimpleDBMSParser)import com.sleepycat.je.Database;import com.sleepycat.je.DatabaseException;import com.sleepycat.je.DatabaseConfig;import com.sleepycat.je.Cursor;import com.sleepycat.je.*;import com.sleepycat.je.Environment;import com.sleepycat.je.EnvironmentConfig;import com.sleepycat.je.DatabaseEntry;import com.sleepycat.bind.serial.SerialBinding;import com.sleepycat.bind.serial.*;import com.sleepycat.bind.EntryBinding;import com.sleepycat.je.LockMode;import java.io.File;import java.util.Vector;public class SimpleDBMSParser{	public static final boolean suppress = true;  	public static void alert(String input)	{		if(suppress)			System.out.println(input);	}  	public static Environment myDbEnvironment = null;	public static Database myDatabase = null;	public static CreateTableRequest c_request = new CreateTableRequest();	public static DropTableRequest d_request = new DropTableRequest();	public static DescRequest desc_request = new DescRequest();	public static EntryBinding allTablesBinding;	public static EntryBinding tableBinding;	public static StoredClassCatalog classCatalog;	public static void main(String args[]) throws ParseException	{		SimpleDBMSParser parser = new SimpleDBMSParser(System.in);		_setupDB();		_getAllTables();		while (true)		{			try			{				System.out.print("DB_2013-11557> ");				parser.command();			}			catch(ParseException e)			{				System.out.println(new SyntaxError());				SimpleDBMSParser.ReInit(System.in);			}			catch (Exception e)			{			  	System.out.println("UNKNOWN ERROR : "+e.getMessage());			  	SimpleDBMSParser.ReInit(System.in);			}			finally			{				c_request = new CreateTableRequest();				d_request = new DropTableRequest();				desc_request =new DescRequest();			}		}	}	private static void _setupDB()	{		EnvironmentConfig envConfig = new EnvironmentConfig();		envConfig.setAllowCreate(true);		myDbEnvironment = new Environment(new File("db/"), envConfig);		DatabaseConfig dbConfig = new DatabaseConfig();		dbConfig.setAllowCreate(true);		myDatabase = myDbEnvironment.openDatabase(null, "sampleDatabase", dbConfig);		classCatalog = new StoredClassCatalog(myDatabase);	}	//must be used when the existence is 100% sure!!	private static Table _getTable(String tableName)	{		Cursor cursor;		DatabaseEntry key,data;		cursor = myDatabase.openCursor(null,null);		String keyString = "^alltable^"+tableName;		Table theTable = null;		try		{			key = new DatabaseEntry(keyString.getBytes("UTF-8"));			data = new DatabaseEntry();			cursor.getSearchKey(key,data,LockMode.DEFAULT);			theTable = (Table)tableBinding.entryToObject(data);		}		catch(Exception e)		{			alert("Error : _getTable occured");		}		finally		{			if(cursor!=null)				cursor.close();		}		return theTable;	}		private static AllTables _getAllTables()//return AllTables. if not exists, make it.	{		Cursor cursor = null;		DatabaseEntry key,data;		cursor = myDatabase.openCursor(null,null);		AllTables alltable = null;		try		{			allTablesBinding = new SerialBinding(classCatalog,AllTables.class);			tableBinding = new SerialBinding(classCatalog,Table.class);			key = new DatabaseEntry("^alltable".getBytes("UTF-8"));			data = new DatabaseEntry();			if(cursor.getSearchKey(key,data,LockMode.DEFAULT)==OperationStatus.SUCCESS)			{//the metadata exists.				alltable  = (AllTables)allTablesBinding.entryToObject(data);			}			else //the metatdata does not exist.			{			  	//System.out.println("New metadata created.");				alltable = new AllTables();				allTablesBinding.objectToEntry(alltable,data);				OperationStatus res = cursor.put(key,data);			}		}		catch(Exception e)		{			alert("Error :_getAllTables occured");		}		finally		{			if(cursor!=null)				cursor.close();		}		return alltable;	}	private static void _addReferedList(String referedTableName, String referingTable)	{		Table referedTable = _getTable(referedTableName);		if(referedTable.refered==null)			referedTable.refered = new Vector<String >(0);		referedTable.refered.addElement(referingTable);		Cursor cursor;		DatabaseEntry key,data;		cursor = myDatabase.openCursor(null,null);		String keyString = "^alltable^"+referedTableName;		Table theTable = null;		try		{			key = new DatabaseEntry(keyString.getBytes("UTF-8"));			data = new DatabaseEntry();			tableBinding.objectToEntry(referedTable,data);			cursor.put(key,data);		}		catch(Exception e)		{			alert("Error : _addReferedList occured");		}		finally		{			if(cursor!=null)				cursor.close();		}	}	private static void _replaceAllTables(AllTables alltables)	{	  DatabaseEntry data,key;	  Cursor cursor = myDatabase.openCursor(null,null);		try		{		  	data = new DatabaseEntry();		  	key = new DatabaseEntry("^alltable".getBytes("UTF-8"));			allTablesBinding.objectToEntry(alltables,data);			OperationStatus res = cursor.put(key,data);		}		catch(Exception e)		{			alert("Error : modifying metadata occured");		}		finally		{			if(cursor!=null)				cursor.close();		}	}	private static void _deleteReferedList(String referedTableName, String referingTableName)	{	  Cursor cursor = myDatabase.openCursor(null,null);	 	 try		{		Table referedTable = _getTable(referedTableName);		if(referedTable.refered==null)			referedTable.refered = new Vector<String>(0);		referedTable.refered.remove(referingTableName);		DatabaseEntry key,data;				String keyString = "^alltable^"+referedTableName;		Table theTable = null;					key = new DatabaseEntry(keyString.getBytes("UTF-8"));			data = new DatabaseEntry();			tableBinding.objectToEntry(referedTable,data);			cursor.put(key,data);		}		catch(Exception e)		{			alert("Error : _deleteReferedList occured");		}		finally		{			if(cursor!=null)				cursor.close();		}	}	private static void _deleteTable(String tableName)	{		Cursor cursor = myDatabase.openCursor(null,null);	 	try		{		DatabaseEntry key;				String keyString = "^alltable^"+tableName;					key = new DatabaseEntry(keyString.getBytes("UTF-8"));						myDatabase.delete(null,key);		}		catch(Exception e)		{			alert("Error : _deleteTable occured");		}		finally		{			if(cursor!=null)				cursor.close();		}	}	public static QueryMessage createHandler()	{	  			Cursor cursor;		DatabaseEntry key=new DatabaseEntry(),data=new DatabaseEntry();		CreateTableRequest req = c_request;				AllTables at = _getAllTables();		Vector<String> alltablenames = at.tableNames;		//1. if duplicate columns appear.		for(String colName : req.columnNames)		{			int index = req.columnNames.indexOf(colName);			if(req.columnNames.indexOf(colName,index+1)!=-1)				return new DuplicateColumnDefError();		}		//2. if duplicate primary key definition appears		if(req.dupKeyError)			return new DuplicatePrimaryKeyDefError();		for(String priColName : req.primaryColumns)		{			int index = req.primaryColumns.indexOf(priColName);			if(req.primaryColumns.indexOf(priColName,index+1)!=-1)				return new DuplicateColumnDefError();		}		//9. if a table with the same name already exists.		if(alltablenames.indexOf(req.tableName)!=-1)			return new TableExistenceError();		//7. if primary key column is not defined.		for(String keyColname : req.primaryColumns)			if(req.columnNames.indexOf(keyColname)==-1)				return new NonExistingColumnDefError(keyColname);		//8. if foreign key column is not defined.		for(RefColumn references : req.referenceColumns)			for(String refingColname : references.refingNames)				if(req.columnNames.indexOf(refingColname)==-1)					return new NonExistingColumnDefError(refingColname);		//6. if foreign key refers non-existing table.		for(RefColumn references : req.referenceColumns)			if(alltablenames.indexOf(references.tableName)==-1)				return new ReferenceTableExistenceError();		//5. if foreign key refers non-existing column.		for(RefColumn references : req.referenceColumns)		{		 	String referedTableName = references.tableName;		 	Table referedTable = _getTable(referedTableName); 			for(String refedColname : references.refedNames)				if(referedTable.columnNames.indexOf(refedColname)==-1)					return new ReferenceColumnExistenceError();		}				//3. if foreign key type and referenced column type differ.		for(RefColumn references : req.referenceColumns)			if(references.refingNames.size() != references.refedNames.size())				return new ReferenceTypeError();				for(RefColumn references : req.referenceColumns)		{			String referedTableName = references.tableName;		 	Table referedTable = _getTable(referedTableName); 			for(String refingColname : references.refingNames)			{				int index = references.refingNames.indexOf(refingColname);				String correspondedColname = references.refedNames.elementAt(index);				Column referedColumn = null;				for(Column thecol : referedTable.columns)					if(thecol.columnName.equals(correspondedColname))						referedColumn = thecol;				Column referingColumn = null;				for(Column thecol : req.columns)					if(thecol.columnName.equals(refingColname))						referingColumn = thecol;				if(!referedColumn.dataType.equals(referingColumn.dataType))					return new ReferenceTypeError();			}		}		//4. if foreign key refers non-primary key column.		for(RefColumn references : req.referenceColumns)		{			String referedTableName = references.tableName;		 	Table referedTable = _getTable(referedTableName); 			for(String refingColname : references.refingNames)			{				int index = references.refingNames.indexOf(refingColname);				String correspondedColname = references.refedNames.elementAt(index);				Column referedColumn = null;				for(Column thecol : referedTable.columns)					if(thecol.columnName.equals(correspondedColname))						if(!thecol.isKey)							return new ReferenceNonPrimaryKeyError();			}		}		//10. if char length < 1		for(Column col : req.columns)			if(!col.isLenOk())				return new CharLengthError();		//All conditions met. Make a Table.		//when create a table, two key-value pairs change.		for(String priColName : req.primaryColumns)			for(Column col : req.columns)				if(col.columnName.equals(priColName))				{				  	col.nullOk=false;  					col.isKey=true;				}		for(RefColumn references : req.referenceColumns)			for(String refColName : references.refingNames)				for(Column col : req.columns)					if(col.columnName.equals(refColName))						col.isFor=true;				//System.out.println(req);		//1. metadata : open allTable and modify AllTable object and put again.				at = _getAllTables();		at.addTable(req.tableName);		_replaceAllTables(at);		//2. table : create a key-value pair!		Vector<String> referingTableNames = new Vector<String>(0);		for(RefColumn refelement : req.referenceColumns)			referingTableNames.addElement(refelement.tableName);		  					Table newTable = new Table(req.tableName,req.columns,referingTableNames,null);//referencing, new Vector<String >(0));		for(RefColumn refelement : req.referenceColumns)			_addReferedList(refelement.tableName, req.tableName);				String keyString = "^alltable^"+req.tableName;		cursor = myDatabase.openCursor(null,null);		try		{			key = new DatabaseEntry(keyString.getBytes("UTF-8"));			data = new DatabaseEntry();			tableBinding.objectToEntry(newTable,data);			OperationStatus res = cursor.put(key,data);//			if(res==OperationStatus.SUCCESS)//				System.out.println("Success");//			else//				System.out.println("Failed");		}		catch(Exception e)		{		  System.out.println(e.getMessage());			alert("Error : _inserting data occured");		}		finally		{			if(cursor!=null)				cursor.close();		}		return new CreateTableSuccess(req.tableName);	}	public static QueryMessage dropHandler()	{	  	DropTableRequest req = d_request;	  	QueryMessage result = new Dummy();		Vector<String > tableNamesList;		AllTables alltables = _getAllTables();				if(req.all)		{  			tableNamesList = alltables.tableNames;			for(String tableName : tableNamesList)				_deleteTable(tableName);			AllTables alltable = new AllTables();			_replaceAllTables(alltable);			return new DropSuccessAllTables();		}		else		{ 			tableNamesList = req.colList;						for(String tableName : tableNamesList)			{			  	if(alltables.tableNames.indexOf(tableName)==-1)			  	{					System.out.println(new NoSuchTable());					continue;			  	}//attempt to delete!								Table targetTable = _getTable(tableName);				if(targetTable.refered!=null)				{					if(targetTable.refered.size() != 0)					{					  						System.out.println(new DropReferencedTableError(tableName));						continue;					}				}				for(String referedTableName : targetTable.refering)					_deleteReferedList(referedTableName,targetTable.tableName);					AllTables alltable = _getAllTables();				alltable.deleteTable(tableName);				_replaceAllTables(alltable);				System.out.println(new DropSuccess(tableName));				_deleteTable(tableName);						}		}		return result;	}	public static QueryMessage descHandler()	{	  	DescRequest req = desc_request;		QueryMessage result = new Dummy();		Vector<String > tableNamesList;		AllTables alltables = _getAllTables();				if(req.all)			tableNamesList = alltables.tableNames;		else			tableNamesList = req.colList;		for(String tableName : tableNamesList)		{		  	if(alltables.tableNames.indexOf(tableName)==-1)		  	{				System.out.println(new NoSuchTable());				continue;		  	}			System.out.println("--------------------------------------------------------");			System.out.println(_getTable(tableName));		}		System.out.println("--------------------------------------------------------");		return result;	}}PARSER_END(SimpleDBMSParser)SKIP : { " " | "\r" | "\t" | "\n" }TOKEN : /* Keywords */{	< EXIT : "exit" >	| < INT : "int" >	| < CHAR : "char" >	| < DATE : "date" >	| < CREATE : "create" >	| < TABLE : "table" >	| < NOT_NULL : "not null" >	| < PRIMARY : "primary" >	| < KEY : "key" >	| < FOREIGN : "foreign" >	| < REFERENCES : "references" >	| < DROP : "drop" >	| < DESC : "desc" >	| < SELECT : "select" >	| < AS : "as" >	| < FROM : "from" >	| < WHERE : "where" >	| < AND : "and" >	| < OR : "or" >	| < NOT : "not" >	| < IS : "is" >	| < NULL : "null" >	| < INTO : "into" >	| < INSERT : "insert" >	| < DELETE : "delete" >	| < VALUES : "values" >}TOKEN :{	< SEMICOLON : ";" >	| < PERIOD : "." >	| < LEFT_PAREN : "(" >	| < RIGHT_PAREN : ")" >	| < COMMA : "," >	| < QUOTE : "\'" >	| < DOUBLE_QUOTE : "\"" >	| < UNDERSCORE : "_" >	| < SIGN : "+" | "-" >	| < ASTERISK : "*" >	| < INT_VALUE : (< SIGN >)? (< DIGIT >)+ >	| < DIGIT : [ "0"-"9" ] >	| < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >	| < ALPHABET : [ "A"-"Z", "a"-"z" ] >	| < DATE_VALUE : < NNNN >"-"< NN >"-"< NN >>	| < NNNN : < DIGIT >< DIGIT >< DIGIT >< DIGIT >>	| < NN : < DIGIT >< DIGIT >>	| < COMP_OP : ">"|"<"|"="|">="|"<="|"!=" >	| < CHAR_STRING : < QUOTE >(< NON_QUOTE_CHAR >)*< QUOTE >>}TOKEN :{		< NON_QUOTE_CHAR : < DIGIT >|< ALPHABET >|< NON_QUOTE_SPECIAL_CHAR >|" ">		| < NON_QUOTE_SPECIAL_CHAR : ["!","@","#","$","%","^","&","*","(",")","[","]","{","}",":",";","?","/",",",".","<",">","\\","|","+","-","_","=","~","`"] >}	/*	followings are implemented grammar.	these are obvious unless otherwise commented.	 */	void command() :	{}	{		queryList()		| (				< EXIT >				< SEMICOLON >				{					if(myDatabase != null)						myDatabase.close();					if(myDbEnvironment != null)						myDbEnvironment.close();					System.exit(0);				}				) 	}	void queryList() :	{		QueryMessage res;	}	{		(				res = query()				< SEMICOLON >				{					System.out.print("DB_2013-11557> ");					System.out.println(res);				}				)+	}	QueryMessage query() :	{		QueryMessage mes= new Dummy();	}	{		(			createTableQuery()			{				mes = createHandler();				c_request = new CreateTableRequest();							}		| dropTableQuery()			{				mes = dropHandler();				d_request = new DropTableRequest();			}		| descQuery()			{				mes = descHandler();				desc_request = new DescRequest();			}		)		(			{				return mes;			}		)  	}	void createTableQuery() :	{		String tName;	}	{		(				< CREATE >				< TABLE >				tName = tableName()				tableElementList()		)		(			{				c_request.tableName = tName;			}		)	}	void tableElementList() :	{}	{		< LEFT_PAREN >		tableElement()		(			< COMMA >			tableElement()		)*		< RIGHT_PAREN >	}	void tableElement() :	{	}	{		columnDefinition()		| tableConstraintDefinition()	}	void columnDefinition() :	{		String colName;		DataType datatype;		boolean nullOk=true;	}	{		colName = columnName()				datatype = dataType()				(						< NOT_NULL >						{							nullOk=false;						}						)?								{			c_request.columnNames.addElement(colName);			c_request.columns.addElement(new Column(colName,datatype,nullOk,false,false));								}	}	void tableConstraintDefinition() :	{}	{		primaryKeyConstraint()		| referentialConstraint()	}	void primaryKeyConstraint() :	{		Vector<String > colList;	}	{		< PRIMARY >		< KEY >		colList = columnNameList()		{			if(c_request.keyAlready)			{				c_request.dupKeyError=true;				return;			}			else			{				c_request.keyAlready=true;				c_request.primaryColumns = colList;			}		}	}	void referentialConstraint() :	{		Vector<String > refingC;		String tName;		Vector<String > refedC;	}	{	  	(			< FOREIGN >			< KEY >			refingC = columnNameList()			< REFERENCES >			tName = tableName()			refedC = columnNameList()		)		(		 	{c_request.referenceColumns.addElement(new RefColumn(refingC,tName,refedC));}		)	}	Vector<String > columnNameList() :	{		Vector<String > result=new Vector<String >(0);		String n;	}	{		(			< LEFT_PAREN >			n=columnName(){result.addElement(n);}			(				< COMMA >				n=columnName(){result.addElement(n);}			)*			< RIGHT_PAREN >		)		(			{				return result;			}		)	}	DataType dataType() :	{		Token n;	}	{		< INT >		{			return new DataType(DataType.INT,0);		}		| (				< CHAR >				< LEFT_PAREN >				n  = < INT_VALUE >				< RIGHT_PAREN >				{					return new DataType(DataType.CHAR,Integer.parseInt(n.image));				}				)		| < DATE > {return new DataType(DataType.DATE,0);}	}	String tableName() :	{		Token n;	}	{		n = < LEGAL_IDENTIFIER >		{			return n.image.toLowerCase(); 		}	}	String columnName() :	{		Token n;	}	{		n = < LEGAL_IDENTIFIER >		{			return n.image.toLowerCase();		}	}	/*=======================DROP TABLE===============================================DROP TABLE===============================================DROP TABLE========================	 */	void dropTableQuery() :	{}	{		< DROP >		< TABLE >		dropTableNameList()	}	void dropTableNameList() :	{		String tname;	}	{		< ASTERISK >		{			d_request.all = true;		}		|		tname = tableName()	{d_request.colList.addElement(tname);}		(				< COMMA >				tname = tableName()	{d_request.colList.addElement(tname);}		)*	}	/*=======================DESC===============================================DESC===============================================DESC========================	 */	void descQuery() :	{	}	{		< DESC >		descTableNameList()	}	void descTableNameList() :	{		String tname;	}	{		< ASTERISK >		{			desc_request.all = true;		}		|		tname = tableName()	{desc_request.colList.addElement(tname);}		(				< COMMA >				tname = tableName()	{desc_request.colList.addElement(tname);}				)*	}	//	///*	//=======================SELECT========================	//=======================SELECT========================	//=======================SELECT========================	//*/	//	//void selectQuery() :	//{	//}	//{	//  < SELECT >	//  selectList()	//  tableExpression()	//}	//	//void selectList() :	//{	//}	//{	//  < ASTERISK >	//| selectedColumn()	//  (	//    < COMMA >	//    selectedColumn()	//  )*	//}	//	///*	//selected Column ::= (tableName.)?columnName(as columnName)?	//both tableName and columnName are "legal identifier" although named differently.	//parser cannot decide if the input identifier token is tableName or columnName.	//parser need to lookahead one more token and decide.	//Since lookahead(1) is default in javaCC, lookahead(2) is used.	//*/	//void selectedColumn() :	//{	//}	//{	//  (	//    LOOKAHEAD(2)	//    tableName()	//    < PERIOD >	//  )?	//  columnName()	//  (	//    < AS >	//    columnName()	//  )?	//}	//	//	//void tableExpression() :	//{	//}	//{	//  fromClause()	//  (	//    whereClause()	//  )?	//}	//	//void fromClause() :	//{	//}	//{	//  < FROM >	//  tableReferenceList()	//}	//	//void tableReferenceList() :	//{	//}	//{	//  referedTable()	//  (	//    < COMMA >	//    referedTable()	//  )*	//}	//	//void referedTable() :	//{	//}	//{	//  tableName()	//  (	//    < AS >	//    tableName()	//  )?	//}	//	//void whereClause() :	//{	//}	//{	//  < WHERE >	//  booleanValueExpression()	//}	//	//	//	///*	//following is original grammar stated.	//void booleanValueExpression() :	//{	//}	//{	//  booleanTerm()	//| booleanValueExpression()	//  < OR >	//  booleanTerm()	//}	//	//void booleanTerm() :	//{	//}	//{	//  booleanFactor()	//| booleanTerm()	//  < AND >	//  booleanFactor()	//}	//	//both booleanValueExpression and booleanTerm have left recursion.	//A::=Aa|b can be modified using extra nonterminal	//1. A::= bA'	//2. A'::= aA'|e	//	//left recursion is removed from booleanValueExpression and booleanTerm using two _TEMP nonterminals	//*/	//	//void booleanValueExpression() :	//{	//}	//{	//  booleanTerm()	//  booleanValueExpression_TEMP()	//}	//	//void booleanValueExpression_TEMP() :	//{	//}	//{	//  (	//    < OR >	//    booleanTerm()	//    booleanValueExpression_TEMP()	//  )?	//}	//	//void booleanTerm() :	//{	//}	//{	//  booleanFactor()	//  booleanTerm_TEMP()	//}	//	//void booleanTerm_TEMP() :	//{	//}	//{	//  (	//    < AND >	//    booleanFactor()	//    booleanTerm_TEMP()	//  )?	//}	//	//void booleanFactor() :	//{	//}	//{	//  (	//    < NOT >	//  )?	//  booleanTest()	//}	//	//void booleanTest() :	//{	//}	//{	//  predicate()	//| parenthesizedBooleanExpression()	//}	//	//void parenthesizedBooleanExpression() :	//{	//}	//{	//  < LEFT_PAREN >	//  booleanValueExpression()	//  < RIGHT_PAREN >	//}	///*	//predicate ::= nullPredicate | comparisonPredicate	//nullPredicate ::= (tableName.)?columnName nullOperation	//comparisonPredicate ::= comOperand comOp comOperand	//comOperand ::= (tableName.)?columnName | comparableValue	//	//thus, here is another ambiguity parser have to resolve.	//	//predicate can be either nullPredicate or comparisonPredicate.	//both have common prefix of (tableName.)?columnName	//in order to decide between them, parser must know what comes after columnName. (If nullOperation, it is nullPredicate. If comOp, it is comparison-)	//thus, parser needs 3 extra lookahead.	//*/	//	//void predicate() :	//{	//}	//{	//  LOOKAHEAD(4)	//  nullPredicate()	//| comparisonPredicate()	//}	//	//void comparisonPredicate() :	//{	//}	//{	//  compOperand()	//  < COMP_OP >	//  compOperand()	//}	///*	//same type of ambiguity occurs.	//need one extra lookahead as in "selectedColumn()"	//*/	//void compOperand() :	//{	//}	//{	//  comparableValue()	//| (	//    LOOKAHEAD(2)	//    tableName()	//    < PERIOD >	//  )?	//  columnName()	//}	//	//void comparableValue() :	//{	//}	//{	//  < INT_VALUE >	//| < CHAR_STRING >	//| < DATE_VALUE >	//}	//	///*	//same type of ambiguity occurs.	//need one extra lookahead as in "selectedColumn()"	//*/	//void nullPredicate() :	//{	//}	//{	//  (	//    LOOKAHEAD(2)	//    tableName()	//    < PERIOD >	//  )?	//  columnName()	//  nullOperation()	//}	//	//void nullOperation() :	//{	//}	//{	//  < IS >	//  (	//    < NULL >	//  | < NOT_NULL >	//  )	//}	//	//	////=======================INSERT,DELETE========================	////=======================INSERT,DELETE========================	////=======================INSERT,DELETE========================	//	//	//void insertQuery() :	//{	//}	//{	//  < INSERT >	//  < INTO >	//  tableName()	//  insertColumnsAndSource()	//}	//	//void insertColumnsAndSource() :	//{	//}	//{	//  (	//    columnNameList()	//  )?	//  valueList()	//}	//	//void valueList() :	//{	//}	//{	//  < VALUES >	//  < LEFT_PAREN >	//  value()	//  (	//    < COMMA >	//    value()	//  )*	//  < RIGHT_PAREN >	//}	//	//void value() :	//{	//}	//{	//  < NULL >	//|   comparableValue()	//}	//	//void deleteQuery() :	//{	//}	//{	//  < DELETE >	//  < FROM >	//  tableName()	//  (	//    whereClause()	//  )?	//}